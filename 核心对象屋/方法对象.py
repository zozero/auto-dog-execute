import os

from 公共函数屋.字符转换 import 字符串转换, 范围转换
from 数据类型屋.结果类型 import 结果类
from 核心对象屋.可视对象 import 计算机可视化开源类
from 通用对象屋.委托对象 import 委托对象类


class 匹配方法类:
    @staticmethod
    def 图片匹配(**参数列表) -> 结果类:
        """
        用于在新图中找到和旧图相似的图。
        :param 参数列表:
        新图：
        旧图路径：
        :return:
        """
        新图 = 计算机可视化开源类.转成灰度图(参数列表['新图'])

        旧图 = 计算机可视化开源类.读取图片(参数列表['旧图路径'])
        旧图 = 计算机可视化开源类.转成灰度图(旧图)

        返回值 = 计算机可视化开源类.匹配模板(新图, 旧图, 参数列表['算法'], 参数列表['最低相似度'], 参数列表['额外补充'])
        # 修改相对图片的位置为相对屏幕的位置
        返回值.位置 = (
            返回值.位置[0] + 参数列表['范围'][0],
            返回值.位置[1] + 参数列表['范围'][1]
        )
        return 返回值

    @staticmethod
    def 二值图片匹配(**参数列表):
        参数列表['新图'] = 计算机可视化开源类.二值化图片(参数列表['新图'], 阈值=参数列表['阈值'],
                                                         阈值类型=参数列表['阈值类型'])

        匹配图片 = 计算机可视化开源类.读取图片(参数列表['旧图路径'])
        匹配图片 = 计算机可视化开源类.二值化图片(匹配图片, 阈值=参数列表['阈值'], 阈值类型=参数列表['阈值类型'])

        返回值 = 计算机可视化开源类.匹配模板(参数列表['新图'], 匹配图片, 参数列表['算法'], 参数列表['最低相似度'])
        # 修改相对图片的位置为相对屏幕的位置
        返回值.位置 = (
            返回值.位置[0] + 参数列表['范围'][0],
            返回值.位置[1] + 参数列表['范围'][1]
        )
        return 返回值

    @staticmethod
    def 分配函数(编码) -> dict:
        """
        主要是为了获取文件名和函数实例方法
        :param 编码:
        :return:
        """
        # 返回旧图的文件目录和相应方法的函数
        match 编码:
            case 'A':
                return {
                    '文件名': '图片匹配',
                    '函数实例': 匹配方法类.图片匹配
                }
            case 'B':
                return {
                    '文件名': '二值图片匹配',
                    '函数实例': 匹配方法类.二值图片匹配
                }


class 方法预处理类:
    """
    主要是为了准备匹配方法的参数

    """

    def __init__(self, 编码, 参数字典):
        self.编码 = 编码
        self.参数字典 = 参数字典

        match 编码:
            case 'A':
                self.预处理图片匹配()
            case 'B':
                self.预处理二值图片匹配()

    def 预处理图片匹配(self):
        # 截取范围是左上和右下的坐标
        范围 = 范围转换(self.参数字典['范围'], 委托对象类.字典[self.参数字典['项目名']].获取手机屏幕尺寸())
        图片路径, 图片 = 委托对象类.字典[self.参数字典['项目名']].裁剪图片(范围)
        self.参数字典['新图'] = 图片
        self.参数字典['新图路径'] = 图片路径
        self.参数字典['范围'] = 范围

    def 预处理二值图片匹配(self):
        # 截取范围是左上和右下的坐标
        范围 = 范围转换(self.参数字典['范围'], 委托对象类.字典[self.参数字典['项目名']].获取手机屏幕尺寸())
        图片路径, 图片 = 委托对象类.字典[self.参数字典['项目名']].裁剪图片(范围)
        self.参数字典['新图'] = 图片
        self.参数字典['新图路径'] = 图片路径
        self.参数字典['范围'] = 范围
